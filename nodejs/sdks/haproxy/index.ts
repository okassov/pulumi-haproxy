// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { BindArgs, BindState } from "./bind";
export type Bind = import("./bind").Bind;
export const Bind: typeof import("./bind").Bind = null as any;
utilities.lazyLoad(exports, ["Bind"], () => require("./bind"));

export { CacheArgs, CacheState } from "./cache";
export type Cache = import("./cache").Cache;
export const Cache: typeof import("./cache").Cache = null as any;
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));

export { DefaultsArgs, DefaultsState } from "./defaults";
export type Defaults = import("./defaults").Defaults;
export const Defaults: typeof import("./defaults").Defaults = null as any;
utilities.lazyLoad(exports, ["Defaults"], () => require("./defaults"));

export { FrontendArgs, FrontendState } from "./frontend";
export type Frontend = import("./frontend").Frontend;
export const Frontend: typeof import("./frontend").Frontend = null as any;
utilities.lazyLoad(exports, ["Frontend"], () => require("./frontend"));

export { GetAclArgs, GetAclResult, GetAclOutputArgs } from "./getAcl";
export const getAcl: typeof import("./getAcl").getAcl = null as any;
export const getAclOutput: typeof import("./getAcl").getAclOutput = null as any;
utilities.lazyLoad(exports, ["getAcl","getAclOutput"], () => require("./getAcl"));

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));

export { GetBindArgs, GetBindResult, GetBindOutputArgs } from "./getBind";
export const getBind: typeof import("./getBind").getBind = null as any;
export const getBindOutput: typeof import("./getBind").getBindOutput = null as any;
utilities.lazyLoad(exports, ["getBind","getBindOutput"], () => require("./getBind"));

export { GetCacheArgs, GetCacheResult, GetCacheOutputArgs } from "./getCache";
export const getCache: typeof import("./getCache").getCache = null as any;
export const getCacheOutput: typeof import("./getCache").getCacheOutput = null as any;
utilities.lazyLoad(exports, ["getCache","getCacheOutput"], () => require("./getCache"));

export { GetDefaultsArgs, GetDefaultsResult, GetDefaultsOutputArgs } from "./getDefaults";
export const getDefaults: typeof import("./getDefaults").getDefaults = null as any;
export const getDefaultsOutput: typeof import("./getDefaults").getDefaultsOutput = null as any;
utilities.lazyLoad(exports, ["getDefaults","getDefaultsOutput"], () => require("./getDefaults"));

export { GetFrontendArgs, GetFrontendResult, GetFrontendOutputArgs } from "./getFrontend";
export const getFrontend: typeof import("./getFrontend").getFrontend = null as any;
export const getFrontendOutput: typeof import("./getFrontend").getFrontendOutput = null as any;
utilities.lazyLoad(exports, ["getFrontend","getFrontendOutput"], () => require("./getFrontend"));

export { GetGlobalArgs, GetGlobalResult, GetGlobalOutputArgs } from "./getGlobal";
export const getGlobal: typeof import("./getGlobal").getGlobal = null as any;
export const getGlobalOutput: typeof import("./getGlobal").getGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getGlobal","getGlobalOutput"], () => require("./getGlobal"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetHealthArgs, GetHealthResult, GetHealthOutputArgs } from "./getHealth";
export const getHealth: typeof import("./getHealth").getHealth = null as any;
export const getHealthOutput: typeof import("./getHealth").getHealthOutput = null as any;
utilities.lazyLoad(exports, ["getHealth","getHealthOutput"], () => require("./getHealth"));

export { GetNameserverArgs, GetNameserverResult, GetNameserverOutputArgs } from "./getNameserver";
export const getNameserver: typeof import("./getNameserver").getNameserver = null as any;
export const getNameserverOutput: typeof import("./getNameserver").getNameserverOutput = null as any;
utilities.lazyLoad(exports, ["getNameserver","getNameserverOutput"], () => require("./getNameserver"));

export { GetResolversArgs, GetResolversResult, GetResolversOutputArgs } from "./getResolvers";
export const getResolvers: typeof import("./getResolvers").getResolvers = null as any;
export const getResolversOutput: typeof import("./getResolvers").getResolversOutput = null as any;
utilities.lazyLoad(exports, ["getResolvers","getResolversOutput"], () => require("./getResolvers"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserlistArgs, GetUserlistResult, GetUserlistOutputArgs } from "./getUserlist";
export const getUserlist: typeof import("./getUserlist").getUserlist = null as any;
export const getUserlistOutput: typeof import("./getUserlist").getUserlistOutput = null as any;
utilities.lazyLoad(exports, ["getUserlist","getUserlistOutput"], () => require("./getUserlist"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { NameserverArgs, NameserverState } from "./nameserver";
export type Nameserver = import("./nameserver").Nameserver;
export const Nameserver: typeof import("./nameserver").Nameserver = null as any;
utilities.lazyLoad(exports, ["Nameserver"], () => require("./nameserver"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResolversArgs, ResolversState } from "./resolvers";
export type Resolvers = import("./resolvers").Resolvers;
export const Resolvers: typeof import("./resolvers").Resolvers = null as any;
utilities.lazyLoad(exports, ["Resolvers"], () => require("./resolvers"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserlistArgs, UserlistState } from "./userlist";
export type Userlist = import("./userlist").Userlist;
export const Userlist: typeof import("./userlist").Userlist = null as any;
utilities.lazyLoad(exports, ["Userlist"], () => require("./userlist"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "haproxy:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "haproxy:index/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "haproxy:index/bind:Bind":
                return new Bind(name, <any>undefined, { urn })
            case "haproxy:index/cache:Cache":
                return new Cache(name, <any>undefined, { urn })
            case "haproxy:index/defaults:Defaults":
                return new Defaults(name, <any>undefined, { urn })
            case "haproxy:index/frontend:Frontend":
                return new Frontend(name, <any>undefined, { urn })
            case "haproxy:index/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "haproxy:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "haproxy:index/nameserver:Nameserver":
                return new Nameserver(name, <any>undefined, { urn })
            case "haproxy:index/resolvers:Resolvers":
                return new Resolvers(name, <any>undefined, { urn })
            case "haproxy:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "haproxy:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "haproxy:index/userlist:Userlist":
                return new Userlist(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("haproxy", "index/acl", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/backend", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/bind", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/cache", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/defaults", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/frontend", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/global", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/group", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/nameserver", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/resolvers", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/server", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/user", _module)
pulumi.runtime.registerResourceModule("haproxy", "index/userlist", _module)
pulumi.runtime.registerResourcePackage("haproxy", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:haproxy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
