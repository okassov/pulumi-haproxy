// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The address of the server
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * To enable health check for the server.
     */
    public readonly check!: pulumi.Output<boolean | undefined>;
    /**
     * The fall value states that a server will be considered as failed after consecutive unsuccessful health checks.
     */
    public readonly fall!: pulumi.Output<number | undefined>;
    /**
     * The inter value is the time interval in milliseconds between two consecutive health checks.
     */
    public readonly inter!: pulumi.Output<number | undefined>;
    /**
     * The name of the server. It must be unique and cannot be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the parent object
     */
    public readonly parentName!: pulumi.Output<string>;
    /**
     * The type of the parent object
     */
    public readonly parentType!: pulumi.Output<string>;
    /**
     * The port of the server
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The rise value states that a server will be considered as operational after consecutive successful health checks.
     */
    public readonly rise!: pulumi.Output<number | undefined>;
    /**
     * To send a Proxy Protocol header to the backend server,
     */
    public readonly sendProxy!: pulumi.Output<boolean | undefined>;
    public readonly serverId!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["check"] = state ? state.check : undefined;
            resourceInputs["fall"] = state ? state.fall : undefined;
            resourceInputs["inter"] = state ? state.inter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentName"] = state ? state.parentName : undefined;
            resourceInputs["parentType"] = state ? state.parentType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["rise"] = state ? state.rise : undefined;
            resourceInputs["sendProxy"] = state ? state.sendProxy : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.parentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentName'");
            }
            if ((!args || args.parentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentType'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["check"] = args ? args.check : undefined;
            resourceInputs["fall"] = args ? args.fall : undefined;
            resourceInputs["inter"] = args ? args.inter : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentName"] = args ? args.parentName : undefined;
            resourceInputs["parentType"] = args ? args.parentType : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["rise"] = args ? args.rise : undefined;
            resourceInputs["sendProxy"] = args ? args.sendProxy : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The address of the server
     */
    address?: pulumi.Input<string>;
    /**
     * To enable health check for the server.
     */
    check?: pulumi.Input<boolean>;
    /**
     * The fall value states that a server will be considered as failed after consecutive unsuccessful health checks.
     */
    fall?: pulumi.Input<number>;
    /**
     * The inter value is the time interval in milliseconds between two consecutive health checks.
     */
    inter?: pulumi.Input<number>;
    /**
     * The name of the server. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent object
     */
    parentName?: pulumi.Input<string>;
    /**
     * The type of the parent object
     */
    parentType?: pulumi.Input<string>;
    /**
     * The port of the server
     */
    port?: pulumi.Input<number>;
    /**
     * The rise value states that a server will be considered as operational after consecutive successful health checks.
     */
    rise?: pulumi.Input<number>;
    /**
     * To send a Proxy Protocol header to the backend server,
     */
    sendProxy?: pulumi.Input<boolean>;
    serverId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The address of the server
     */
    address: pulumi.Input<string>;
    /**
     * To enable health check for the server.
     */
    check?: pulumi.Input<boolean>;
    /**
     * The fall value states that a server will be considered as failed after consecutive unsuccessful health checks.
     */
    fall?: pulumi.Input<number>;
    /**
     * The inter value is the time interval in milliseconds between two consecutive health checks.
     */
    inter?: pulumi.Input<number>;
    /**
     * The name of the server. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent object
     */
    parentName: pulumi.Input<string>;
    /**
     * The type of the parent object
     */
    parentType: pulumi.Input<string>;
    /**
     * The port of the server
     */
    port: pulumi.Input<number>;
    /**
     * The rise value states that a server will be considered as operational after consecutive successful health checks.
     */
    rise?: pulumi.Input<number>;
    /**
     * To send a Proxy Protocol header to the backend server,
     */
    sendProxy?: pulumi.Input<boolean>;
    serverId?: pulumi.Input<string>;
}
