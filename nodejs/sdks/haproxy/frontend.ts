// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Frontend extends pulumi.CustomResource {
    /**
     * Get an existing Frontend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontendState, opts?: pulumi.CustomResourceOptions): Frontend {
        return new Frontend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/frontend:Frontend';

    /**
     * Returns true if the given object is an instance of Frontend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Frontend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontend.__pulumiType;
    }

    /**
     * The accept invalid http request of the frontend.
     */
    public readonly acceptInvalidHttpRequest!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the backend.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * The backlog of the frontend.
     */
    public readonly backlog!: pulumi.Output<number | undefined>;
    /**
     * The compression of the frontend.
     */
    public readonly compressions!: pulumi.Output<outputs.FrontendCompression[] | undefined>;
    /**
     * The error log format of the frontend.
     */
    public readonly errorLogFormat!: pulumi.Output<string | undefined>;
    /**
     * The forwardfor of the frontend.
     */
    public readonly forwardfors!: pulumi.Output<outputs.FrontendForwardfor[] | undefined>;
    public readonly frontendId!: pulumi.Output<string>;
    /**
     * The http connection mode of the frontend. It can be one of the following values: httpclose, http-server-close,
     * http-keep-alive
     */
    public readonly httpConnectionMode!: pulumi.Output<string | undefined>;
    /**
     * The http keep alive timeout of the frontend.
     */
    public readonly httpKeepAliveTimeout!: pulumi.Output<number | undefined>;
    /**
     * The http request timeout of the frontend.
     */
    public readonly httpRequestTimeout!: pulumi.Output<number | undefined>;
    /**
     * The http use proxy header of the frontend.
     */
    public readonly httpUseProxyHeader!: pulumi.Output<boolean | undefined>;
    /**
     * The http log of the frontend.
     */
    public readonly httplog!: pulumi.Output<boolean | undefined>;
    /**
     * The https log of the frontend.
     */
    public readonly httpslog!: pulumi.Output<boolean | undefined>;
    /**
     * The log format of the frontend.
     */
    public readonly logFormat!: pulumi.Output<string | undefined>;
    /**
     * The log format sd of the frontend.
     */
    public readonly logFormatSd!: pulumi.Output<string | undefined>;
    /**
     * The max connection of the frontend.
     */
    public readonly maxconn!: pulumi.Output<number | undefined>;
    /**
     * The mode of the frontend. It can be one of the following values: http, tcp
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The monitor uri of the frontend.
     */
    public readonly monitorUri!: pulumi.Output<string | undefined>;
    /**
     * The name of the frontend. It must be unique and cannot be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tcp log of the frontend.
     */
    public readonly tcplog!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Frontend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontendArgs | FrontendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontendState | undefined;
            resourceInputs["acceptInvalidHttpRequest"] = state ? state.acceptInvalidHttpRequest : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["backlog"] = state ? state.backlog : undefined;
            resourceInputs["compressions"] = state ? state.compressions : undefined;
            resourceInputs["errorLogFormat"] = state ? state.errorLogFormat : undefined;
            resourceInputs["forwardfors"] = state ? state.forwardfors : undefined;
            resourceInputs["frontendId"] = state ? state.frontendId : undefined;
            resourceInputs["httpConnectionMode"] = state ? state.httpConnectionMode : undefined;
            resourceInputs["httpKeepAliveTimeout"] = state ? state.httpKeepAliveTimeout : undefined;
            resourceInputs["httpRequestTimeout"] = state ? state.httpRequestTimeout : undefined;
            resourceInputs["httpUseProxyHeader"] = state ? state.httpUseProxyHeader : undefined;
            resourceInputs["httplog"] = state ? state.httplog : undefined;
            resourceInputs["httpslog"] = state ? state.httpslog : undefined;
            resourceInputs["logFormat"] = state ? state.logFormat : undefined;
            resourceInputs["logFormatSd"] = state ? state.logFormatSd : undefined;
            resourceInputs["maxconn"] = state ? state.maxconn : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["monitorUri"] = state ? state.monitorUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tcplog"] = state ? state.tcplog : undefined;
        } else {
            const args = argsOrState as FrontendArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["acceptInvalidHttpRequest"] = args ? args.acceptInvalidHttpRequest : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["backlog"] = args ? args.backlog : undefined;
            resourceInputs["compressions"] = args ? args.compressions : undefined;
            resourceInputs["errorLogFormat"] = args ? args.errorLogFormat : undefined;
            resourceInputs["forwardfors"] = args ? args.forwardfors : undefined;
            resourceInputs["frontendId"] = args ? args.frontendId : undefined;
            resourceInputs["httpConnectionMode"] = args ? args.httpConnectionMode : undefined;
            resourceInputs["httpKeepAliveTimeout"] = args ? args.httpKeepAliveTimeout : undefined;
            resourceInputs["httpRequestTimeout"] = args ? args.httpRequestTimeout : undefined;
            resourceInputs["httpUseProxyHeader"] = args ? args.httpUseProxyHeader : undefined;
            resourceInputs["httplog"] = args ? args.httplog : undefined;
            resourceInputs["httpslog"] = args ? args.httpslog : undefined;
            resourceInputs["logFormat"] = args ? args.logFormat : undefined;
            resourceInputs["logFormatSd"] = args ? args.logFormatSd : undefined;
            resourceInputs["maxconn"] = args ? args.maxconn : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["monitorUri"] = args ? args.monitorUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tcplog"] = args ? args.tcplog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Frontend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Frontend resources.
 */
export interface FrontendState {
    /**
     * The accept invalid http request of the frontend.
     */
    acceptInvalidHttpRequest?: pulumi.Input<boolean>;
    /**
     * The name of the backend.
     */
    backend?: pulumi.Input<string>;
    /**
     * The backlog of the frontend.
     */
    backlog?: pulumi.Input<number>;
    /**
     * The compression of the frontend.
     */
    compressions?: pulumi.Input<pulumi.Input<inputs.FrontendCompression>[]>;
    /**
     * The error log format of the frontend.
     */
    errorLogFormat?: pulumi.Input<string>;
    /**
     * The forwardfor of the frontend.
     */
    forwardfors?: pulumi.Input<pulumi.Input<inputs.FrontendForwardfor>[]>;
    frontendId?: pulumi.Input<string>;
    /**
     * The http connection mode of the frontend. It can be one of the following values: httpclose, http-server-close,
     * http-keep-alive
     */
    httpConnectionMode?: pulumi.Input<string>;
    /**
     * The http keep alive timeout of the frontend.
     */
    httpKeepAliveTimeout?: pulumi.Input<number>;
    /**
     * The http request timeout of the frontend.
     */
    httpRequestTimeout?: pulumi.Input<number>;
    /**
     * The http use proxy header of the frontend.
     */
    httpUseProxyHeader?: pulumi.Input<boolean>;
    /**
     * The http log of the frontend.
     */
    httplog?: pulumi.Input<boolean>;
    /**
     * The https log of the frontend.
     */
    httpslog?: pulumi.Input<boolean>;
    /**
     * The log format of the frontend.
     */
    logFormat?: pulumi.Input<string>;
    /**
     * The log format sd of the frontend.
     */
    logFormatSd?: pulumi.Input<string>;
    /**
     * The max connection of the frontend.
     */
    maxconn?: pulumi.Input<number>;
    /**
     * The mode of the frontend. It can be one of the following values: http, tcp
     */
    mode?: pulumi.Input<string>;
    /**
     * The monitor uri of the frontend.
     */
    monitorUri?: pulumi.Input<string>;
    /**
     * The name of the frontend. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The tcp log of the frontend.
     */
    tcplog?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Frontend resource.
 */
export interface FrontendArgs {
    /**
     * The accept invalid http request of the frontend.
     */
    acceptInvalidHttpRequest?: pulumi.Input<boolean>;
    /**
     * The name of the backend.
     */
    backend: pulumi.Input<string>;
    /**
     * The backlog of the frontend.
     */
    backlog?: pulumi.Input<number>;
    /**
     * The compression of the frontend.
     */
    compressions?: pulumi.Input<pulumi.Input<inputs.FrontendCompression>[]>;
    /**
     * The error log format of the frontend.
     */
    errorLogFormat?: pulumi.Input<string>;
    /**
     * The forwardfor of the frontend.
     */
    forwardfors?: pulumi.Input<pulumi.Input<inputs.FrontendForwardfor>[]>;
    frontendId?: pulumi.Input<string>;
    /**
     * The http connection mode of the frontend. It can be one of the following values: httpclose, http-server-close,
     * http-keep-alive
     */
    httpConnectionMode?: pulumi.Input<string>;
    /**
     * The http keep alive timeout of the frontend.
     */
    httpKeepAliveTimeout?: pulumi.Input<number>;
    /**
     * The http request timeout of the frontend.
     */
    httpRequestTimeout?: pulumi.Input<number>;
    /**
     * The http use proxy header of the frontend.
     */
    httpUseProxyHeader?: pulumi.Input<boolean>;
    /**
     * The http log of the frontend.
     */
    httplog?: pulumi.Input<boolean>;
    /**
     * The https log of the frontend.
     */
    httpslog?: pulumi.Input<boolean>;
    /**
     * The log format of the frontend.
     */
    logFormat?: pulumi.Input<string>;
    /**
     * The log format sd of the frontend.
     */
    logFormatSd?: pulumi.Input<string>;
    /**
     * The max connection of the frontend.
     */
    maxconn?: pulumi.Input<number>;
    /**
     * The mode of the frontend. It can be one of the following values: http, tcp
     */
    mode?: pulumi.Input<string>;
    /**
     * The monitor uri of the frontend.
     */
    monitorUri?: pulumi.Input<string>;
    /**
     * The name of the frontend. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The tcp log of the frontend.
     */
    tcplog?: pulumi.Input<boolean>;
}
