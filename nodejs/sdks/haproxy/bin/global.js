"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Global = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Global extends pulumi.CustomResource {
    /**
     * Get an existing Global resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Global(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Global.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Global.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["caBase"] = state ? state.caBase : undefined;
            resourceInputs["chroot"] = state ? state.chroot : undefined;
            resourceInputs["cpuSet"] = state ? state.cpuSet : undefined;
            resourceInputs["crtBase"] = state ? state.crtBase : undefined;
            resourceInputs["daemon"] = state ? state.daemon : undefined;
            resourceInputs["globalId"] = state ? state.globalId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["masterWorker"] = state ? state.masterWorker : undefined;
            resourceInputs["maxcompcpuusage"] = state ? state.maxcompcpuusage : undefined;
            resourceInputs["maxconn"] = state ? state.maxconn : undefined;
            resourceInputs["maxpipes"] = state ? state.maxpipes : undefined;
            resourceInputs["maxsslconn"] = state ? state.maxsslconn : undefined;
            resourceInputs["nbproc"] = state ? state.nbproc : undefined;
            resourceInputs["nbthread"] = state ? state.nbthread : undefined;
            resourceInputs["pidfile"] = state ? state.pidfile : undefined;
            resourceInputs["process"] = state ? state.process : undefined;
            resourceInputs["sslDefaultBindCiphers"] = state ? state.sslDefaultBindCiphers : undefined;
            resourceInputs["sslDefaultBindOptions"] = state ? state.sslDefaultBindOptions : undefined;
            resourceInputs["statsMaxconn"] = state ? state.statsMaxconn : undefined;
            resourceInputs["statsTimeout"] = state ? state.statsTimeout : undefined;
            resourceInputs["ulimitN"] = state ? state.ulimitN : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["caBase"] = args ? args.caBase : undefined;
            resourceInputs["chroot"] = args ? args.chroot : undefined;
            resourceInputs["cpuSet"] = args ? args.cpuSet : undefined;
            resourceInputs["crtBase"] = args ? args.crtBase : undefined;
            resourceInputs["daemon"] = args ? args.daemon : undefined;
            resourceInputs["globalId"] = args ? args.globalId : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["masterWorker"] = args ? args.masterWorker : undefined;
            resourceInputs["maxcompcpuusage"] = args ? args.maxcompcpuusage : undefined;
            resourceInputs["maxconn"] = args ? args.maxconn : undefined;
            resourceInputs["maxpipes"] = args ? args.maxpipes : undefined;
            resourceInputs["maxsslconn"] = args ? args.maxsslconn : undefined;
            resourceInputs["nbproc"] = args ? args.nbproc : undefined;
            resourceInputs["nbthread"] = args ? args.nbthread : undefined;
            resourceInputs["pidfile"] = args ? args.pidfile : undefined;
            resourceInputs["process"] = args ? args.process : undefined;
            resourceInputs["sslDefaultBindCiphers"] = args ? args.sslDefaultBindCiphers : undefined;
            resourceInputs["sslDefaultBindOptions"] = args ? args.sslDefaultBindOptions : undefined;
            resourceInputs["statsMaxconn"] = args ? args.statsMaxconn : undefined;
            resourceInputs["statsTimeout"] = args ? args.statsTimeout : undefined;
            resourceInputs["ulimitN"] = args ? args.ulimitN : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Global.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Global = Global;
/** @internal */
Global.__pulumiType = 'haproxy:index/global:Global';
//# sourceMappingURL=global.js.map