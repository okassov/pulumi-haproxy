"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Backend = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Backend extends pulumi.CustomResource {
    /**
     * Get an existing Backend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Backend(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Backend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backend.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["advCheck"] = state ? state.advCheck : undefined;
            resourceInputs["backendId"] = state ? state.backendId : undefined;
            resourceInputs["balances"] = state ? state.balances : undefined;
            resourceInputs["checkCache"] = state ? state.checkCache : undefined;
            resourceInputs["checkTimeout"] = state ? state.checkTimeout : undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["forwardfors"] = state ? state.forwardfors : undefined;
            resourceInputs["httpConnectionMode"] = state ? state.httpConnectionMode : undefined;
            resourceInputs["httpchkParams"] = state ? state.httpchkParams : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queueTimeout"] = state ? state.queueTimeout : undefined;
            resourceInputs["serverTimeout"] = state ? state.serverTimeout : undefined;
            resourceInputs["tarpitTimeout"] = state ? state.tarpitTimeout : undefined;
            resourceInputs["tunnelTimeout"] = state ? state.tunnelTimeout : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["advCheck"] = args ? args.advCheck : undefined;
            resourceInputs["backendId"] = args ? args.backendId : undefined;
            resourceInputs["balances"] = args ? args.balances : undefined;
            resourceInputs["checkCache"] = args ? args.checkCache : undefined;
            resourceInputs["checkTimeout"] = args ? args.checkTimeout : undefined;
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["forwardfors"] = args ? args.forwardfors : undefined;
            resourceInputs["httpConnectionMode"] = args ? args.httpConnectionMode : undefined;
            resourceInputs["httpchkParams"] = args ? args.httpchkParams : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queueTimeout"] = args ? args.queueTimeout : undefined;
            resourceInputs["serverTimeout"] = args ? args.serverTimeout : undefined;
            resourceInputs["tarpitTimeout"] = args ? args.tarpitTimeout : undefined;
            resourceInputs["tunnelTimeout"] = args ? args.tunnelTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Backend = Backend;
/** @internal */
Backend.__pulumiType = 'haproxy:index/backend:Backend';
//# sourceMappingURL=backend.js.map