"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Frontend = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Frontend extends pulumi.CustomResource {
    /**
     * Get an existing Frontend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Frontend(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Frontend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontend.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptInvalidHttpRequest"] = state ? state.acceptInvalidHttpRequest : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["backlog"] = state ? state.backlog : undefined;
            resourceInputs["compressions"] = state ? state.compressions : undefined;
            resourceInputs["errorLogFormat"] = state ? state.errorLogFormat : undefined;
            resourceInputs["forwardfors"] = state ? state.forwardfors : undefined;
            resourceInputs["frontendId"] = state ? state.frontendId : undefined;
            resourceInputs["httpConnectionMode"] = state ? state.httpConnectionMode : undefined;
            resourceInputs["httpKeepAliveTimeout"] = state ? state.httpKeepAliveTimeout : undefined;
            resourceInputs["httpRequestTimeout"] = state ? state.httpRequestTimeout : undefined;
            resourceInputs["httpUseProxyHeader"] = state ? state.httpUseProxyHeader : undefined;
            resourceInputs["httplog"] = state ? state.httplog : undefined;
            resourceInputs["httpslog"] = state ? state.httpslog : undefined;
            resourceInputs["logFormat"] = state ? state.logFormat : undefined;
            resourceInputs["logFormatSd"] = state ? state.logFormatSd : undefined;
            resourceInputs["maxconn"] = state ? state.maxconn : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["monitorUri"] = state ? state.monitorUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tcplog"] = state ? state.tcplog : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["acceptInvalidHttpRequest"] = args ? args.acceptInvalidHttpRequest : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["backlog"] = args ? args.backlog : undefined;
            resourceInputs["compressions"] = args ? args.compressions : undefined;
            resourceInputs["errorLogFormat"] = args ? args.errorLogFormat : undefined;
            resourceInputs["forwardfors"] = args ? args.forwardfors : undefined;
            resourceInputs["frontendId"] = args ? args.frontendId : undefined;
            resourceInputs["httpConnectionMode"] = args ? args.httpConnectionMode : undefined;
            resourceInputs["httpKeepAliveTimeout"] = args ? args.httpKeepAliveTimeout : undefined;
            resourceInputs["httpRequestTimeout"] = args ? args.httpRequestTimeout : undefined;
            resourceInputs["httpUseProxyHeader"] = args ? args.httpUseProxyHeader : undefined;
            resourceInputs["httplog"] = args ? args.httplog : undefined;
            resourceInputs["httpslog"] = args ? args.httpslog : undefined;
            resourceInputs["logFormat"] = args ? args.logFormat : undefined;
            resourceInputs["logFormatSd"] = args ? args.logFormatSd : undefined;
            resourceInputs["maxconn"] = args ? args.maxconn : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["monitorUri"] = args ? args.monitorUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tcplog"] = args ? args.tcplog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Frontend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Frontend = Frontend;
/** @internal */
Frontend.__pulumiType = 'haproxy:index/frontend:Frontend';
//# sourceMappingURL=frontend.js.map