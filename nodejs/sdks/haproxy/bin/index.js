"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Userlist = exports.User = exports.Server = exports.Resolvers = exports.Provider = exports.Nameserver = exports.Group = exports.Global = exports.getUserlistOutput = exports.getUserlist = exports.getUserOutput = exports.getUser = exports.getServerOutput = exports.getServer = exports.getResolversOutput = exports.getResolvers = exports.getNameserverOutput = exports.getNameserver = exports.getHealthOutput = exports.getHealth = exports.getGroupOutput = exports.getGroup = exports.getGlobalOutput = exports.getGlobal = exports.getFrontendOutput = exports.getFrontend = exports.getDefaultsOutput = exports.getDefaults = exports.getCacheOutput = exports.getCache = exports.getBindOutput = exports.getBind = exports.getBackendOutput = exports.getBackend = exports.getAclOutput = exports.getAcl = exports.Frontend = exports.Defaults = exports.Cache = exports.Bind = exports.Backend = exports.Acl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Acl = null;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));
exports.Backend = null;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));
exports.Bind = null;
utilities.lazyLoad(exports, ["Bind"], () => require("./bind"));
exports.Cache = null;
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));
exports.Defaults = null;
utilities.lazyLoad(exports, ["Defaults"], () => require("./defaults"));
exports.Frontend = null;
utilities.lazyLoad(exports, ["Frontend"], () => require("./frontend"));
exports.getAcl = null;
exports.getAclOutput = null;
utilities.lazyLoad(exports, ["getAcl", "getAclOutput"], () => require("./getAcl"));
exports.getBackend = null;
exports.getBackendOutput = null;
utilities.lazyLoad(exports, ["getBackend", "getBackendOutput"], () => require("./getBackend"));
exports.getBind = null;
exports.getBindOutput = null;
utilities.lazyLoad(exports, ["getBind", "getBindOutput"], () => require("./getBind"));
exports.getCache = null;
exports.getCacheOutput = null;
utilities.lazyLoad(exports, ["getCache", "getCacheOutput"], () => require("./getCache"));
exports.getDefaults = null;
exports.getDefaultsOutput = null;
utilities.lazyLoad(exports, ["getDefaults", "getDefaultsOutput"], () => require("./getDefaults"));
exports.getFrontend = null;
exports.getFrontendOutput = null;
utilities.lazyLoad(exports, ["getFrontend", "getFrontendOutput"], () => require("./getFrontend"));
exports.getGlobal = null;
exports.getGlobalOutput = null;
utilities.lazyLoad(exports, ["getGlobal", "getGlobalOutput"], () => require("./getGlobal"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getHealth = null;
exports.getHealthOutput = null;
utilities.lazyLoad(exports, ["getHealth", "getHealthOutput"], () => require("./getHealth"));
exports.getNameserver = null;
exports.getNameserverOutput = null;
utilities.lazyLoad(exports, ["getNameserver", "getNameserverOutput"], () => require("./getNameserver"));
exports.getResolvers = null;
exports.getResolversOutput = null;
utilities.lazyLoad(exports, ["getResolvers", "getResolversOutput"], () => require("./getResolvers"));
exports.getServer = null;
exports.getServerOutput = null;
utilities.lazyLoad(exports, ["getServer", "getServerOutput"], () => require("./getServer"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getUserlist = null;
exports.getUserlistOutput = null;
utilities.lazyLoad(exports, ["getUserlist", "getUserlistOutput"], () => require("./getUserlist"));
exports.Global = null;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.Nameserver = null;
utilities.lazyLoad(exports, ["Nameserver"], () => require("./nameserver"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Resolvers = null;
utilities.lazyLoad(exports, ["Resolvers"], () => require("./resolvers"));
exports.Server = null;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.Userlist = null;
utilities.lazyLoad(exports, ["Userlist"], () => require("./userlist"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "haproxy:index/acl:Acl":
                return new exports.Acl(name, undefined, { urn });
            case "haproxy:index/backend:Backend":
                return new exports.Backend(name, undefined, { urn });
            case "haproxy:index/bind:Bind":
                return new exports.Bind(name, undefined, { urn });
            case "haproxy:index/cache:Cache":
                return new exports.Cache(name, undefined, { urn });
            case "haproxy:index/defaults:Defaults":
                return new exports.Defaults(name, undefined, { urn });
            case "haproxy:index/frontend:Frontend":
                return new exports.Frontend(name, undefined, { urn });
            case "haproxy:index/global:Global":
                return new exports.Global(name, undefined, { urn });
            case "haproxy:index/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "haproxy:index/nameserver:Nameserver":
                return new exports.Nameserver(name, undefined, { urn });
            case "haproxy:index/resolvers:Resolvers":
                return new exports.Resolvers(name, undefined, { urn });
            case "haproxy:index/server:Server":
                return new exports.Server(name, undefined, { urn });
            case "haproxy:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "haproxy:index/userlist:Userlist":
                return new exports.Userlist(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("haproxy", "index/acl", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/backend", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/bind", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/cache", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/defaults", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/frontend", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/global", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/group", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/nameserver", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/resolvers", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/server", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/user", _module);
pulumi.runtime.registerResourceModule("haproxy", "index/userlist", _module);
pulumi.runtime.registerResourcePackage("haproxy", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:haproxy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map