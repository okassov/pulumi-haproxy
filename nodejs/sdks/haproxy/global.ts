// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Global extends pulumi.CustomResource {
    /**
     * Get an existing Global resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalState, opts?: pulumi.CustomResourceOptions): Global {
        return new Global(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/global:Global';

    /**
     * Returns true if the given object is an instance of Global.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Global {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Global.__pulumiType;
    }

    /**
     * CA base directory
     */
    public readonly caBase!: pulumi.Output<string | undefined>;
    /**
     * Chroot directory
     */
    public readonly chroot!: pulumi.Output<string | undefined>;
    /**
     * CPU set
     */
    public readonly cpuSet!: pulumi.Output<string | undefined>;
    /**
     * Certificate base directory
     */
    public readonly crtBase!: pulumi.Output<string | undefined>;
    /**
     * Run in daemon mode
     */
    public readonly daemon!: pulumi.Output<boolean | undefined>;
    public readonly globalId!: pulumi.Output<string>;
    /**
     * Group name
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Master worker mode
     */
    public readonly masterWorker!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum CPU usage in percent
     */
    public readonly maxcompcpuusage!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of connections
     */
    public readonly maxconn!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of pipes
     */
    public readonly maxpipes!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of SSL connections
     */
    public readonly maxsslconn!: pulumi.Output<number | undefined>;
    /**
     * Number of processes
     */
    public readonly nbproc!: pulumi.Output<number | undefined>;
    /**
     * Number of threads
     */
    public readonly nbthread!: pulumi.Output<number | undefined>;
    /**
     * PID file
     */
    public readonly pidfile!: pulumi.Output<string | undefined>;
    /**
     * Process name
     */
    public readonly process!: pulumi.Output<string | undefined>;
    /**
     * SSL default bind ciphers
     */
    public readonly sslDefaultBindCiphers!: pulumi.Output<string | undefined>;
    /**
     * SSL default bind options
     */
    public readonly sslDefaultBindOptions!: pulumi.Output<string | undefined>;
    /**
     * Stats maximum number of connections
     */
    public readonly statsMaxconn!: pulumi.Output<number | undefined>;
    /**
     * Stats timeout
     */
    public readonly statsTimeout!: pulumi.Output<number | undefined>;
    /**
     * Ulimit number
     */
    public readonly ulimitN!: pulumi.Output<number | undefined>;
    /**
     * User name
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a Global resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalArgs | GlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalState | undefined;
            resourceInputs["caBase"] = state ? state.caBase : undefined;
            resourceInputs["chroot"] = state ? state.chroot : undefined;
            resourceInputs["cpuSet"] = state ? state.cpuSet : undefined;
            resourceInputs["crtBase"] = state ? state.crtBase : undefined;
            resourceInputs["daemon"] = state ? state.daemon : undefined;
            resourceInputs["globalId"] = state ? state.globalId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["masterWorker"] = state ? state.masterWorker : undefined;
            resourceInputs["maxcompcpuusage"] = state ? state.maxcompcpuusage : undefined;
            resourceInputs["maxconn"] = state ? state.maxconn : undefined;
            resourceInputs["maxpipes"] = state ? state.maxpipes : undefined;
            resourceInputs["maxsslconn"] = state ? state.maxsslconn : undefined;
            resourceInputs["nbproc"] = state ? state.nbproc : undefined;
            resourceInputs["nbthread"] = state ? state.nbthread : undefined;
            resourceInputs["pidfile"] = state ? state.pidfile : undefined;
            resourceInputs["process"] = state ? state.process : undefined;
            resourceInputs["sslDefaultBindCiphers"] = state ? state.sslDefaultBindCiphers : undefined;
            resourceInputs["sslDefaultBindOptions"] = state ? state.sslDefaultBindOptions : undefined;
            resourceInputs["statsMaxconn"] = state ? state.statsMaxconn : undefined;
            resourceInputs["statsTimeout"] = state ? state.statsTimeout : undefined;
            resourceInputs["ulimitN"] = state ? state.ulimitN : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as GlobalArgs | undefined;
            resourceInputs["caBase"] = args ? args.caBase : undefined;
            resourceInputs["chroot"] = args ? args.chroot : undefined;
            resourceInputs["cpuSet"] = args ? args.cpuSet : undefined;
            resourceInputs["crtBase"] = args ? args.crtBase : undefined;
            resourceInputs["daemon"] = args ? args.daemon : undefined;
            resourceInputs["globalId"] = args ? args.globalId : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["masterWorker"] = args ? args.masterWorker : undefined;
            resourceInputs["maxcompcpuusage"] = args ? args.maxcompcpuusage : undefined;
            resourceInputs["maxconn"] = args ? args.maxconn : undefined;
            resourceInputs["maxpipes"] = args ? args.maxpipes : undefined;
            resourceInputs["maxsslconn"] = args ? args.maxsslconn : undefined;
            resourceInputs["nbproc"] = args ? args.nbproc : undefined;
            resourceInputs["nbthread"] = args ? args.nbthread : undefined;
            resourceInputs["pidfile"] = args ? args.pidfile : undefined;
            resourceInputs["process"] = args ? args.process : undefined;
            resourceInputs["sslDefaultBindCiphers"] = args ? args.sslDefaultBindCiphers : undefined;
            resourceInputs["sslDefaultBindOptions"] = args ? args.sslDefaultBindOptions : undefined;
            resourceInputs["statsMaxconn"] = args ? args.statsMaxconn : undefined;
            resourceInputs["statsTimeout"] = args ? args.statsTimeout : undefined;
            resourceInputs["ulimitN"] = args ? args.ulimitN : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Global.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Global resources.
 */
export interface GlobalState {
    /**
     * CA base directory
     */
    caBase?: pulumi.Input<string>;
    /**
     * Chroot directory
     */
    chroot?: pulumi.Input<string>;
    /**
     * CPU set
     */
    cpuSet?: pulumi.Input<string>;
    /**
     * Certificate base directory
     */
    crtBase?: pulumi.Input<string>;
    /**
     * Run in daemon mode
     */
    daemon?: pulumi.Input<boolean>;
    globalId?: pulumi.Input<string>;
    /**
     * Group name
     */
    group?: pulumi.Input<string>;
    /**
     * Master worker mode
     */
    masterWorker?: pulumi.Input<boolean>;
    /**
     * Maximum CPU usage in percent
     */
    maxcompcpuusage?: pulumi.Input<number>;
    /**
     * Maximum number of connections
     */
    maxconn?: pulumi.Input<number>;
    /**
     * Maximum number of pipes
     */
    maxpipes?: pulumi.Input<number>;
    /**
     * Maximum number of SSL connections
     */
    maxsslconn?: pulumi.Input<number>;
    /**
     * Number of processes
     */
    nbproc?: pulumi.Input<number>;
    /**
     * Number of threads
     */
    nbthread?: pulumi.Input<number>;
    /**
     * PID file
     */
    pidfile?: pulumi.Input<string>;
    /**
     * Process name
     */
    process?: pulumi.Input<string>;
    /**
     * SSL default bind ciphers
     */
    sslDefaultBindCiphers?: pulumi.Input<string>;
    /**
     * SSL default bind options
     */
    sslDefaultBindOptions?: pulumi.Input<string>;
    /**
     * Stats maximum number of connections
     */
    statsMaxconn?: pulumi.Input<number>;
    /**
     * Stats timeout
     */
    statsTimeout?: pulumi.Input<number>;
    /**
     * Ulimit number
     */
    ulimitN?: pulumi.Input<number>;
    /**
     * User name
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Global resource.
 */
export interface GlobalArgs {
    /**
     * CA base directory
     */
    caBase?: pulumi.Input<string>;
    /**
     * Chroot directory
     */
    chroot?: pulumi.Input<string>;
    /**
     * CPU set
     */
    cpuSet?: pulumi.Input<string>;
    /**
     * Certificate base directory
     */
    crtBase?: pulumi.Input<string>;
    /**
     * Run in daemon mode
     */
    daemon?: pulumi.Input<boolean>;
    globalId?: pulumi.Input<string>;
    /**
     * Group name
     */
    group?: pulumi.Input<string>;
    /**
     * Master worker mode
     */
    masterWorker?: pulumi.Input<boolean>;
    /**
     * Maximum CPU usage in percent
     */
    maxcompcpuusage?: pulumi.Input<number>;
    /**
     * Maximum number of connections
     */
    maxconn?: pulumi.Input<number>;
    /**
     * Maximum number of pipes
     */
    maxpipes?: pulumi.Input<number>;
    /**
     * Maximum number of SSL connections
     */
    maxsslconn?: pulumi.Input<number>;
    /**
     * Number of processes
     */
    nbproc?: pulumi.Input<number>;
    /**
     * Number of threads
     */
    nbthread?: pulumi.Input<number>;
    /**
     * PID file
     */
    pidfile?: pulumi.Input<string>;
    /**
     * Process name
     */
    process?: pulumi.Input<string>;
    /**
     * SSL default bind ciphers
     */
    sslDefaultBindCiphers?: pulumi.Input<string>;
    /**
     * SSL default bind options
     */
    sslDefaultBindOptions?: pulumi.Input<string>;
    /**
     * Stats maximum number of connections
     */
    statsMaxconn?: pulumi.Input<number>;
    /**
     * Stats timeout
     */
    statsTimeout?: pulumi.Input<number>;
    /**
     * Ulimit number
     */
    ulimitN?: pulumi.Input<number>;
    /**
     * User name
     */
    user?: pulumi.Input<string>;
}
