// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Resolvers extends pulumi.CustomResource {
    /**
     * Get an existing Resolvers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolversState, opts?: pulumi.CustomResourceOptions): Resolvers {
        return new Resolvers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/resolvers:Resolvers';

    /**
     * Returns true if the given object is an instance of Resolvers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resolvers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resolvers.__pulumiType;
    }

    /**
     * The Accepted Payload Size of the Resolvers.
     */
    public readonly acceptedPayloadSize!: pulumi.Output<number | undefined>;
    /**
     * The hold NX of the Resolvers.
     */
    public readonly holdNx!: pulumi.Output<number | undefined>;
    /**
     * The hold other of the Resolvers.
     */
    public readonly holdOther!: pulumi.Output<number | undefined>;
    /**
     * The hold refused of the Resolvers.
     */
    public readonly holdRefused!: pulumi.Output<number | undefined>;
    /**
     * The hold timeout of the Resolvers.
     */
    public readonly holdTimeout!: pulumi.Output<number | undefined>;
    /**
     * The hold valid of the Resolvers.
     */
    public readonly holdValid!: pulumi.Output<number | undefined>;
    /**
     * The name of the Resolvers. It must be unique and cannot be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The pasre-resolv-conf of the Resolvers. it could be true or false
     */
    public readonly parseResolvConf!: pulumi.Output<boolean | undefined>;
    /**
     * The retries of the Resolvers.
     */
    public readonly resolveRetries!: pulumi.Output<number | undefined>;
    public readonly resolversId!: pulumi.Output<string>;
    /**
     * The timeout resolve of the Resolvers.
     */
    public readonly timeoutResolve!: pulumi.Output<number | undefined>;
    /**
     * The timeout retry of the Resolvers.
     */
    public readonly timeoutRetry!: pulumi.Output<number | undefined>;

    /**
     * Create a Resolvers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResolversArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResolversArgs | ResolversState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResolversState | undefined;
            resourceInputs["acceptedPayloadSize"] = state ? state.acceptedPayloadSize : undefined;
            resourceInputs["holdNx"] = state ? state.holdNx : undefined;
            resourceInputs["holdOther"] = state ? state.holdOther : undefined;
            resourceInputs["holdRefused"] = state ? state.holdRefused : undefined;
            resourceInputs["holdTimeout"] = state ? state.holdTimeout : undefined;
            resourceInputs["holdValid"] = state ? state.holdValid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parseResolvConf"] = state ? state.parseResolvConf : undefined;
            resourceInputs["resolveRetries"] = state ? state.resolveRetries : undefined;
            resourceInputs["resolversId"] = state ? state.resolversId : undefined;
            resourceInputs["timeoutResolve"] = state ? state.timeoutResolve : undefined;
            resourceInputs["timeoutRetry"] = state ? state.timeoutRetry : undefined;
        } else {
            const args = argsOrState as ResolversArgs | undefined;
            resourceInputs["acceptedPayloadSize"] = args ? args.acceptedPayloadSize : undefined;
            resourceInputs["holdNx"] = args ? args.holdNx : undefined;
            resourceInputs["holdOther"] = args ? args.holdOther : undefined;
            resourceInputs["holdRefused"] = args ? args.holdRefused : undefined;
            resourceInputs["holdTimeout"] = args ? args.holdTimeout : undefined;
            resourceInputs["holdValid"] = args ? args.holdValid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parseResolvConf"] = args ? args.parseResolvConf : undefined;
            resourceInputs["resolveRetries"] = args ? args.resolveRetries : undefined;
            resourceInputs["resolversId"] = args ? args.resolversId : undefined;
            resourceInputs["timeoutResolve"] = args ? args.timeoutResolve : undefined;
            resourceInputs["timeoutRetry"] = args ? args.timeoutRetry : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resolvers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Resolvers resources.
 */
export interface ResolversState {
    /**
     * The Accepted Payload Size of the Resolvers.
     */
    acceptedPayloadSize?: pulumi.Input<number>;
    /**
     * The hold NX of the Resolvers.
     */
    holdNx?: pulumi.Input<number>;
    /**
     * The hold other of the Resolvers.
     */
    holdOther?: pulumi.Input<number>;
    /**
     * The hold refused of the Resolvers.
     */
    holdRefused?: pulumi.Input<number>;
    /**
     * The hold timeout of the Resolvers.
     */
    holdTimeout?: pulumi.Input<number>;
    /**
     * The hold valid of the Resolvers.
     */
    holdValid?: pulumi.Input<number>;
    /**
     * The name of the Resolvers. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The pasre-resolv-conf of the Resolvers. it could be true or false
     */
    parseResolvConf?: pulumi.Input<boolean>;
    /**
     * The retries of the Resolvers.
     */
    resolveRetries?: pulumi.Input<number>;
    resolversId?: pulumi.Input<string>;
    /**
     * The timeout resolve of the Resolvers.
     */
    timeoutResolve?: pulumi.Input<number>;
    /**
     * The timeout retry of the Resolvers.
     */
    timeoutRetry?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Resolvers resource.
 */
export interface ResolversArgs {
    /**
     * The Accepted Payload Size of the Resolvers.
     */
    acceptedPayloadSize?: pulumi.Input<number>;
    /**
     * The hold NX of the Resolvers.
     */
    holdNx?: pulumi.Input<number>;
    /**
     * The hold other of the Resolvers.
     */
    holdOther?: pulumi.Input<number>;
    /**
     * The hold refused of the Resolvers.
     */
    holdRefused?: pulumi.Input<number>;
    /**
     * The hold timeout of the Resolvers.
     */
    holdTimeout?: pulumi.Input<number>;
    /**
     * The hold valid of the Resolvers.
     */
    holdValid?: pulumi.Input<number>;
    /**
     * The name of the Resolvers. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The pasre-resolv-conf of the Resolvers. it could be true or false
     */
    parseResolvConf?: pulumi.Input<boolean>;
    /**
     * The retries of the Resolvers.
     */
    resolveRetries?: pulumi.Input<number>;
    resolversId?: pulumi.Input<string>;
    /**
     * The timeout resolve of the Resolvers.
     */
    timeoutResolve?: pulumi.Input<number>;
    /**
     * The timeout retry of the Resolvers.
     */
    timeoutRetry?: pulumi.Input<number>;
}
