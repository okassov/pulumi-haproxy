// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    public readonly aclId!: pulumi.Output<string>;
    /**
     * The criterion of the acl
     */
    public readonly criterion!: pulumi.Output<string>;
    /**
     * The index of the acl in the parent object starting at 0
     */
    public readonly index!: pulumi.Output<number>;
    /**
     * The name of the acl. It must be unique and cannot be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the parent object
     */
    public readonly parentName!: pulumi.Output<string>;
    /**
     * The type of the parent object
     */
    public readonly parentType!: pulumi.Output<string>;
    /**
     * The value of the acl.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["criterion"] = state ? state.criterion : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentName"] = state ? state.parentName : undefined;
            resourceInputs["parentType"] = state ? state.parentType : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.criterion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criterion'");
            }
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.parentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentName'");
            }
            if ((!args || args.parentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentType'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["criterion"] = args ? args.criterion : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentName"] = args ? args.parentName : undefined;
            resourceInputs["parentType"] = args ? args.parentType : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    aclId?: pulumi.Input<string>;
    /**
     * The criterion of the acl
     */
    criterion?: pulumi.Input<string>;
    /**
     * The index of the acl in the parent object starting at 0
     */
    index?: pulumi.Input<number>;
    /**
     * The name of the acl. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent object
     */
    parentName?: pulumi.Input<string>;
    /**
     * The type of the parent object
     */
    parentType?: pulumi.Input<string>;
    /**
     * The value of the acl.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    aclId?: pulumi.Input<string>;
    /**
     * The criterion of the acl
     */
    criterion: pulumi.Input<string>;
    /**
     * The index of the acl in the parent object starting at 0
     */
    index: pulumi.Input<number>;
    /**
     * The name of the acl. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent object
     */
    parentName: pulumi.Input<string>;
    /**
     * The type of the parent object
     */
    parentType: pulumi.Input<string>;
    /**
     * The value of the acl.
     */
    value: pulumi.Input<string>;
}
