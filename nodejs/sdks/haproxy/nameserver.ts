// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nameserver extends pulumi.CustomResource {
    /**
     * Get an existing Nameserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NameserverState, opts?: pulumi.CustomResourceOptions): Nameserver {
        return new Nameserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'haproxy:index/nameserver:Nameserver';

    /**
     * Returns true if the given object is an instance of Nameserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nameserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nameserver.__pulumiType;
    }

    /**
     * The address of the Nameserver
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * The name of the Nameserver. It must be unique and cannot be changed.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nameserverId!: pulumi.Output<string>;
    /**
     * The port of the Nameserver
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The resolver of the Nameserver
     */
    public readonly resolver!: pulumi.Output<string>;

    /**
     * Create a Nameserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NameserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NameserverArgs | NameserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NameserverState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameserverId"] = state ? state.nameserverId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resolver"] = state ? state.resolver : undefined;
        } else {
            const args = argsOrState as NameserverArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.resolver === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolver'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameserverId"] = args ? args.nameserverId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["resolver"] = args ? args.resolver : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nameserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nameserver resources.
 */
export interface NameserverState {
    /**
     * The address of the Nameserver
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the Nameserver. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    nameserverId?: pulumi.Input<string>;
    /**
     * The port of the Nameserver
     */
    port?: pulumi.Input<number>;
    /**
     * The resolver of the Nameserver
     */
    resolver?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nameserver resource.
 */
export interface NameserverArgs {
    /**
     * The address of the Nameserver
     */
    address: pulumi.Input<string>;
    /**
     * The name of the Nameserver. It must be unique and cannot be changed.
     */
    name?: pulumi.Input<string>;
    nameserverId?: pulumi.Input<string>;
    /**
     * The port of the Nameserver
     */
    port: pulumi.Input<number>;
    /**
     * The resolver of the Nameserver
     */
    resolver: pulumi.Input<string>;
}
